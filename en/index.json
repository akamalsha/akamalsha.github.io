[{"content":"I\u0026rsquo;m a Staff Engineer with 10+ years of experience building secure, scalable cloud and on-prem systems. At ThoughtSpot, I lead cloud network design, IAM automation, and compliance initiatives for SOC 2 and ISO 27001.\nMy expertise spans AWS, GCP, Terraform, Okta, and Palo Alto—designing everything from BGP-connected firewalls to automated CI/CD pipelines. I’ve helped streamline user lifecycle management, RBAC policies, and vendor security reviews across global SaaS environments.\nOutside work, I\u0026rsquo;m a tech enthusiast exploring Kubernetes and building a Python-powered blog CMS.\n","permalink":"https://akamalsha.github.io/en/about/","summary":"\u003cp\u003eI\u0026rsquo;m a Staff Engineer with 10+ years of experience building secure, scalable cloud and on-prem systems. At ThoughtSpot, I lead cloud network design, IAM automation, and compliance initiatives for SOC 2 and ISO 27001.\u003c/p\u003e\n\u003cp\u003eMy expertise spans AWS, GCP, Terraform, Okta, and Palo Alto—designing everything from BGP-connected firewalls to automated CI/CD pipelines. I’ve helped streamline user lifecycle management, RBAC policies, and vendor security reviews across global SaaS environments.\u003c/p\u003e\n\u003cp\u003eOutside work, I\u0026rsquo;m a tech enthusiast exploring Kubernetes and building a Python-powered blog CMS.\u003c/p\u003e","title":"About"},{"content":"Many of the apps you deploy in your environment will simply need outbound internet access to download libraries, patches, and OS upgrades, among other things. The best way to accomplish this is to use a network address translation (NAT) gateway, to protect your production ec2 instances from exposing to the outside world.\nYou may securely manage all of your outgoing internet communication from a single location with this hub-and-spoke setup.\nFor every VPC that requires outbound internet connectivity, you must combine an internet gateway with NAT gateways or NAT instances if you don\u0026rsquo;t have an Amazon Transit Gateway. However, maintaining numerous internet gateways, NAT gateways, and instances increases labour and expenses if you have a larger number of VPCs. In that scenario, using AWS Transit Gateway to centralise outbound traffic can help you minimise overhead.\nIn this post we will create a centralised exit point for prod ec2 instances using the Transit Gateway solution.\nWhat is a Transit Gateway solution? Transit Gateway provides a hub and spoke design for connecting VPCs and on-premises networks as a fully managed service without requiring you to provision third-party virtual appliances. No VPN overlay is required, and AWS manages high availability and scalability. More details about transit gateways in this article https://docs.aws.amazon.com/whitepapers/latest/building-scalable-secure-multi-vpc-network-infrastructure/transit-gateway.html\nKey requirements to build a centralised Hub VPC NAT Gateways - This is essential to provide internet access to Spoke VPC EC2 instances. This should be created in the Hub VPC to centralise the connection. Internet Gateway - This is important to allow users access the Hub VPC via a bastion host also the NAT Gateway depends on this. Transit Gateway - This is the main gateway in the central network to route the traffic between Hub and Spoke Solution Overview Deploying the above example I have created a terraform code to deploy this setup from scratch in my previous post For more information, you can refer to my previous post:\nBuilding an AWS Centralized NAT Gateway Solution from Scratch with Terraform After you download the code and make changes to it based on your specific needs, start by running the Terraform commands.\nterraform validate /To validate the config terraform plan /To see what resources will be configured terraform apply /To apply the config into your AWS environment Testing the deployment Login to the bastion host in the Hub VPC using SSH. Then connect to the spoke VPC instances.\nssh -i (path to key) ec2-user@(Public IP of the Bastion Host)\nCopy the SSH key for this Region to the bastion host\nvi sshkey.pem Press i for putting vi in insert mode. Copy the private key you downloaded earlier and paste it into vi. Press Esc Type :wq to save and exit. Use ssh to connect to the Spoke 1 Instance from bastion\nssh -i ./sshkey.pem ec2-user@(Private IP of Spoke 1 Instance)\nTest the internet connectivity using curl from the spoke 1 instance:\ncurl http:www.amazon.com\n","permalink":"https://akamalsha.github.io/en/blog/egreesaws/","summary":"\u003cp\u003eMany of the apps you deploy in your environment will simply need outbound internet access to download libraries, patches, and OS upgrades, among other things. The best way to accomplish this is to use a network address translation (NAT) gateway, to protect your production ec2 instances from exposing to the outside world.\u003c/p\u003e\n\u003cp\u003eYou may securely manage all of your outgoing internet communication from a single location with this hub-and-spoke setup.\u003c/p\u003e","title":"AWS Egress Only Internet Gateway"},{"content":"Nowadays, having your own website is very useful. It helps you create an online identity, display your work, or share your ideas with people around the world. However, making a website can seem difficult, especially if you don\u0026rsquo;t have much money. Don\u0026rsquo;t worry! In this guide, I\u0026rsquo;ll show you how to build a professional website for free using GitHub and Hugo.\nWhat is GitHub and Hugo? GitHub is a popular platform for hosting and sharing code repositories. It\u0026rsquo;s widely used by developers for version control and collaboration on projects. Hugo, on the other hand, is a fast and flexible static site generator written in Go. It allows you to create websites with lightning-fast load times and easy maintenance.\nStep 1: Setting Up Your GitHub Account - First, create a GitHub account if you don\u0026rsquo;t have one already. Go to github.com and sign up for a free account. After you log in, you can make a new repository to store your website files.\nStep 2: Create the Website Repository - Once you have created your github account now you need to create a new public repository to upload the hugo public folder (More details about this folder contents in step 8 ). You need to make sure the repo name is your username.github.io For example akamalsha.github.io\nStep 3: Creating Your Website on your laptop - There are various ways to install hugo on your laptop I personnaly use a mac to build my site and the commands to install hugo is: brew install hugo Once you have installed hugo, you can create a new Hugo site with a single command. Open your terminal or command prompt and run the following: hugo new site my-website This will create a new directory called my-website containing all the files you need to build your website.\nStep 4: Setting up git - Now you need to setup git in your local directory where the site is hosted. Commands to setup git locally are:\ngit remote add origin https://github.com/akamalsha/akamalsha.github.io.git Step 5: Choosing a Theme - Hugo comes with a variety of built-in themes that you can use to customize the look and feel of your website. You can browse the available themes on the official Hugo website and choose one that suits your style. I personally use PaperMod as my hugo theme. You can add it to your site using the following command from the root directory:\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\nStep 6: Customizing Your Website - In the main folder of your website project, you need to modify the hugo.toml file. In this file, you need to change the baseURL setting to point to your GitHub repository\u0026rsquo;s address. Step 7: Previewing Your Site As you make changes to your website, you\u0026rsquo;ll want to preview them locally before deploying them to GitHub. Fortunately, Hugo makes this easy with its built-in development server. Simply run the following command in your terminal:\nhugo server -D\nAfter running this, you will see information about the website build and the local web server address that you can use to view your website on your computer. Step 8: Deploying your site to Github - Once you\u0026rsquo;re happy with how your website looks, it\u0026rsquo;s time to deploy it to GitHub. Go to your public direcotory from the main root hugo website directory Step 9: Verify that the public folder contents are uploaded to your github repo Step 10: Build your static WebSite using github pages - From your github repository go to settings and then in the code and automation select Pages. Change the source to main branch and save Once the process of setting up GitHub Pages and the deployment workflow is finished, you should be able to access your new website.\n","permalink":"https://akamalsha.github.io/en/blog/journey/","summary":"\u003cp\u003eNowadays, having your own website is very useful. It helps you create an online identity, display your work, or share your ideas with people around the world. However, making a website can seem difficult, especially if you don\u0026rsquo;t have much money. Don\u0026rsquo;t worry! In this guide, I\u0026rsquo;ll show you how to build a professional website for free using GitHub and Hugo.\u003c/p\u003e\n\u003cp\u003eWhat is GitHub and Hugo?\nGitHub is a popular platform for hosting and sharing code repositories. It\u0026rsquo;s widely used by developers for version control and collaboration on projects. Hugo, on the other hand, is a fast and flexible static site generator written in Go. It allows you to create websites with lightning-fast load times and easy maintenance.\u003c/p\u003e","title":"Building a Website for Free: My Journey with Hugo and GitHub"},{"content":"Centralised Authentication, Authorization, and Accounting (AAA) in networks is facilitated by the RADIUS (Remote Authentication Dial-In User Service) protocol, which is extensively utilised for VPNs and Wi-Fi. But there is no security when using UDP with standard RADIUS.\nUsing TCP and creating secure TLS (Transport Layer Security) connections, RadSec (RADIUS Security) improves RADIUS. User credentials are shielded from interception and manipulation by this encrypted and secure transmission method.\nFor today\u0026rsquo;s sophisticated networks, RadSec is perfect since it not only increases security but also dependability and scalability. Through the combination of strong security and dependable data transfer, RadSec adoption enhances network access management.\nHow to configure RadSec in Meraki Dashboard?\nMeraki Dashboard configuration if you are using Microsoft CA Login to your organisation from the dashboard navigate to Orgnisation \u0026gt; Configure \u0026gt; Certificates \u0026gt; Upload Certificates Your internal CA Root Certificate has to be uploaded here. Open the certificate services using the URL https://URL_TO_YOUR_CA/CertSrv if you are using Microsoft CA.\nClick on download CA Root Certificate Now upload this to your Meraki Dashboard Creating Meraki Org CA certificate and Uploading it to your Radius Server Generate Meraki CA server certificate After generating you have to trust the Meraki CA certificate and download it to upload to your local Radius server Now login to your Microsoft Radius Server and import the Meraki Root CA certificate. More details on how to manually import Root certifcates on a server can be found here https://learn.microsoft.com/en-us/troubleshoot/windows-server/certificates-and-public-key-infrastructure-pki/install-imported-certificates\nWhen the import process is finished, the Meraki Root certificate should appear in the Radius server\u0026rsquo;s trusted root certificates. Now enable radsec for your Radius server configuration You can even run a quick dashboard test to validate that the authentication is working. ","permalink":"https://akamalsha.github.io/en/blog/rad-sec/","summary":"\u003cp\u003eCentralised Authentication, Authorization, and Accounting (AAA) in networks is facilitated by the RADIUS (Remote Authentication Dial-In User Service) protocol, which is extensively utilised for VPNs and Wi-Fi. But there is no security when using UDP with standard RADIUS.\u003c/p\u003e\n\u003cp\u003eUsing TCP and creating secure TLS (Transport Layer Security) connections, RadSec (RADIUS Security) improves RADIUS. User credentials are shielded from interception and manipulation by this encrypted and secure transmission method.\u003c/p\u003e\n\u003cp\u003eFor today\u0026rsquo;s sophisticated networks, RadSec is perfect since it not only increases security but also dependability and scalability. Through the combination of strong security and dependable data transfer, RadSec adoption enhances network access management.\u003c/p\u003e","title":"Increasing Wireless Network Security with Radius and RadSec in Meraki Dashboard"},{"content":"To add a Cisco Catalyst 9300 switch to the Meraki dashboard, follow these steps:\nObtain the Cloud ID of your Cisco Catalyst 9300 switch. This is typically available on the device\nNavigate to Organization Inventory:\nGo to the Organization tab in the left-hand menu.\nClick on Inventory.\nClaim the Device: Click on the Claim button.\nEnter the Cloud ID of your Catalyst 9300 switch. The Cloud ID can usually be found on a label on the switch or in the switch\u0026rsquo;s local management interface.\nClick Claim to add the switch to your organization\u0026rsquo;s inventory.\nEnable Cloud Management: Access the Catalyst 9300 switch\u0026rsquo;s local management interface (typically via SSH or console access)\nEnter the below commands to enable cloud management\nconfigure terminal meraki cloud-management enable meraki cloud-management cloud-id \u0026lt;Your-Cloud-ID\u0026gt; end write memory ","permalink":"https://akamalsha.github.io/en/blog/meraki9300/","summary":"\u003cp\u003eTo add a Cisco Catalyst 9300 switch to the Meraki dashboard, follow these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eObtain the Cloud ID of your Cisco Catalyst 9300 switch. This is typically available on the device\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNavigate to Organization Inventory:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGo to the Organization tab in the left-hand menu.\u003c/p\u003e\n\u003cp\u003eClick on Inventory.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eClaim the Device:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eClick on the Claim button.\u003c/p\u003e\n\u003cp\u003eEnter the Cloud ID of your Catalyst 9300 switch. The Cloud ID can usually be found on a label on the switch or in the switch\u0026rsquo;s local management interface.\u003c/p\u003e","title":"Meraki 9300 Switch Configuration"},{"content":"Recently, CVE-2024-3400 has emerged as a significant vulnerability affecting Palo Alto devices, raising concerns about the integrity of network security. In response, it\u0026rsquo;s crucial to not only address the vulnerability but also ensure the effective reset of associated threat IDs. In this blog post, we\u0026rsquo;ll delve into how to verify the reset of Threat IDs 95187, 95189, and 95191 in Palo Alto devices using Postman, bolstering your network\u0026rsquo;s defenses against potential exploits.\nUnderstanding CVE-2024-3400 and Associated Threat IDs:\nCVE-2024-3400 represents a critical vulnerability in Palo Alto devices, potentially exposing networks to exploitation by malicious actors. Amidst the heightened risk, Threat IDs 95187 (DoS attack detected), 95189 (DDoS attack detected), and 95191 (DNS Amplification Attack detected) are particularly concerning, posing serious threats to network infrastructure and data security.\nVerification Process Using Postman:\nHere\u0026rsquo;s a step-by-step guide on how to ensure the reset of Threat IDs 95187, 95189, and 95191 using Postman:\nStart by authenticating to your Postman application open a new request tab\nRun a Post request to your PAN URL (your-paloalto-ip/ssl-vpn/test.esp). Add the following headers as attached Now run the post command to your Palo Alto IP. If the threat ID\u0026rsquo;s are successfully applied to your Firewall, your post command should be stuck at sending request\u0026hellip; In your Firewall you should now have a log for the file name test.esp and action as reset-server. ","permalink":"https://akamalsha.github.io/en/blog/pan_cve2024/","summary":"\u003cp\u003eRecently, CVE-2024-3400 has emerged as a significant vulnerability affecting Palo Alto devices, raising concerns about the integrity of network security. In response, it\u0026rsquo;s crucial to not only address the vulnerability but also ensure the effective reset of associated threat IDs. In this blog post, we\u0026rsquo;ll delve into how to verify the reset of Threat IDs 95187, 95189, and 95191 in Palo Alto devices using Postman, bolstering your network\u0026rsquo;s defenses against potential exploits.\u003c/p\u003e","title":"Palo Alto Networks CVE 2024"},{"content":"Add your projects content here.\n","permalink":"https://akamalsha.github.io/en/projects/","summary":"\u003cp\u003eAdd your projects content here.\u003c/p\u003e","title":"Projects"},{"content":"In this post I will be sharing the terraform code to build a Centralized NAT Gateway using Transit Gateway (Route table design)\nI use Visual Studio Code to build my terraform code.\nThe directory structure looks like this This code is also uploaded in my github repo https://github.com/akamalsha/terraform-aws-code\nFeel free to customize the configuration according to your specific requirements and explore additional features and functionalities offered by Terraform and AWS to further optimize your network infrastructure.\nvariables.tf code variable \u0026#34;aws_region\u0026#34; { default = \u0026#34;us-west-2\u0026#34; } variable \u0026#34;prod_environment\u0026#34; { default = \u0026#34;prod-hub\u0026#34; } variable \u0026#34;spoke_01_environmet\u0026#34; { default = \u0026#34;spoke-01\u0026#34; } variable \u0026#34;spoke_02_environmet\u0026#34; { default = \u0026#34;spoke-02\u0026#34; } variable \u0026#34;prod_hub_vpc_cidr\u0026#34; { default = \u0026#34;10.13.0.0/24\u0026#34; description = \u0026#34;prod-hub\u0026#34; } variable \u0026#34;spoke_01_vpc_cidr\u0026#34; { default = \u0026#34;10.14.0.0/24\u0026#34; description = \u0026#34;spoke-01\u0026#34; } variable \u0026#34;spoke_02_vpc_cidr\u0026#34; { default = \u0026#34;10.15.0.0/24\u0026#34; description = \u0026#34;spoke-02\u0026#34; } variable \u0026#34;prod_public_subnets_cidr\u0026#34; { type = list(any) default = [\u0026#34;10.13.0.112/28\u0026#34;] description = \u0026#34;prod-hub-public-subnet\u0026#34; } variable \u0026#34;prod_hub_private_subnets_cidr\u0026#34; { type = list(any) default = [\u0026#34;10.13.0.64/28\u0026#34;] description = \u0026#34;prod-hub-private-subnet\u0026#34; } variable \u0026#34;spoke_01_private_subnets_cidr\u0026#34; { type = list(any) default = [\u0026#34;10.14.0.64/28\u0026#34;] description = \u0026#34;spoke-01-private-subnet\u0026#34; } variable \u0026#34;spoke_02_private_subnets_cidr\u0026#34; { type = list(any) default = [\u0026#34;10.15.0.64/28\u0026#34;] description = \u0026#34;spoke-02-private-subnet\u0026#34; } variable \u0026#34;availability_zone\u0026#34; { type = list default = [\u0026#34;us-west-2a\u0026#34;, \u0026#34;us-west-2b\u0026#34;] } main.tf code terraform { required_providers { aws = { source = \u0026#34;hashicorp/aws\u0026#34; version = \u0026#34;~\u0026gt; 4.16\u0026#34; } } required_version = \u0026#34;\u0026gt;= 1.2.0\u0026#34; } provider \u0026#34;aws\u0026#34; { region = var.aws_region } #VPC_Prod_Hub resource \u0026#34;aws_vpc\u0026#34; \u0026#34;prod_hub\u0026#34; { cidr_block = var.prod_hub_vpc_cidr enable_dns_support = true enable_dns_hostnames = true tags = { Name = \u0026#34;${var.prod_environment}-vpc\u0026#34; \u0026#34;Environment\u0026#34; = var.prod_environment } } #VPC_Spoke_01 resource \u0026#34;aws_vpc\u0026#34; \u0026#34;spoke-01\u0026#34; { cidr_block = var.spoke_01_vpc_cidr enable_dns_support = true enable_dns_hostnames = true tags = { \u0026#34;Name\u0026#34; = \u0026#34;${var.spoke_01_environmet}-vpc\u0026#34; \u0026#34;Environment\u0026#34; = var.spoke_01_environmet } } #VPC_Spoke_02 resource \u0026#34;aws_vpc\u0026#34; \u0026#34;spoke-02\u0026#34; { cidr_block = var.spoke_02_vpc_cidr enable_dns_support = true enable_dns_hostnames = true tags = { \u0026#34;Name\u0026#34; = \u0026#34;${var.spoke_02_environmet}-vpc\u0026#34; \u0026#34;Environment\u0026#34; = var.spoke_02_environmet } } #Prod-hub Public Subnet resource \u0026#34;aws_subnet\u0026#34; \u0026#34;prod-hub-pub\u0026#34; { vpc_id = aws_vpc.prod_hub.id count = length(var.prod_public_subnets_cidr) cidr_block = element (var.prod_public_subnets_cidr, count.index) availability_zone = var.availability_zone[0] map_public_ip_on_launch = true } #Prod-hub Private Subnet resource \u0026#34;aws_subnet\u0026#34; \u0026#34;prod-hub-private\u0026#34; { vpc_id = aws_vpc.prod_hub.id count = length(var.prod_hub_private_subnets_cidr) cidr_block = element (var.prod_hub_private_subnets_cidr, count.index) availability_zone = var.availability_zone[0] map_public_ip_on_launch = false } #Spoke-01 Private Subnet resource \u0026#34;aws_subnet\u0026#34; \u0026#34;spoke-01-private\u0026#34; { vpc_id = aws_vpc.spoke-01.id count = length(var.spoke_01_private_subnets_cidr) cidr_block = element (var.spoke_01_private_subnets_cidr, count.index) availability_zone = var.availability_zone[0] map_public_ip_on_launch = false } #Spoke-02 Private Subnet resource \u0026#34;aws_subnet\u0026#34; \u0026#34;spoke-02-private\u0026#34; { vpc_id = aws_vpc.spoke-02.id count = length(var.spoke_02_private_subnets_cidr) cidr_block = element (var.spoke_02_private_subnets_cidr, count.index) availability_zone = var.availability_zone[0] map_public_ip_on_launch = false } #IGW Prod-hub resource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;IGW_ProdHub\u0026#34; { vpc_id =aws_vpc.prod_hub.id tags = { \u0026#34;Name\u0026#34; = \u0026#34;$var.prod_environment-igw\u0026#34; \u0026#34;Environment\u0026#34; = var.prod_environment } } # Elastic-IP (eip) for NAT- ProdHub resource \u0026#34;aws_eip\u0026#34; \u0026#34;nat_eip\u0026#34; { vpc = true depends_on = [aws_internet_gateway.IGW_ProdHub] } # NAT Gateway in Prod-hub resource \u0026#34;aws_nat_gateway\u0026#34; \u0026#34;Prod_HubNAT\u0026#34; { allocation_id = aws_eip.nat_eip.id subnet_id = element(aws_subnet.prod-hub-pub.*.id, 0) tags = { Name = \u0026#34;nat-gateway-${var.prod_environment}\u0026#34; Environment = \u0026#34;${var.prod_environment}\u0026#34; } } #Transit Gateway for Prod-Hub Egress VPC resource \u0026#34;aws_ec2_transit_gateway\u0026#34; \u0026#34;ProdHub_EgressTGW\u0026#34; { description = \u0026#34;TGW to connect to Spoke VPC\u0026#34; default_route_table_association = \u0026#34;disable\u0026#34; default_route_table_propagation = \u0026#34;disable\u0026#34; } #Create TGW Route Tables resource \u0026#34;aws_ec2_transit_gateway_route_table\u0026#34; \u0026#34;RT-Egrees\u0026#34; { transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id } resource \u0026#34;aws_ec2_transit_gateway_route_table\u0026#34; \u0026#34;RT-Private\u0026#34; { transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id } #Create TGW attachment for Prod-Hub VPC resource \u0026#34;aws_ec2_transit_gateway_vpc_attachment\u0026#34; \u0026#34;prod-hub\u0026#34; { transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id vpc_id = aws_vpc.prod_hub.id subnet_ids = [aws_subnet.prod-hub-private[0].id] transit_gateway_default_route_table_association = false transit_gateway_default_route_table_propagation = false } #Create TGW attachment for Spoke-01 VPC resource \u0026#34;aws_ec2_transit_gateway_vpc_attachment\u0026#34; \u0026#34;spoke-01\u0026#34; { transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id vpc_id = aws_vpc.spoke-01.id subnet_ids = [aws_subnet.spoke-01-private[0].id] transit_gateway_default_route_table_association = false transit_gateway_default_route_table_propagation = false } #Create TGW attachment for Spoke-02 VPC resource \u0026#34;aws_ec2_transit_gateway_vpc_attachment\u0026#34; \u0026#34;spoke-02\u0026#34; { transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id vpc_id = aws_vpc.spoke-02.id subnet_ids = [aws_subnet.spoke-02-private[0].id] transit_gateway_default_route_table_association = false transit_gateway_default_route_table_propagation = false } # Routing tables to route traffic for Public Subnet in Prod-Hub resource \u0026#34;aws_route_table\u0026#34; \u0026#34;prod-hub-public\u0026#34; { vpc_id = aws_vpc.prod_hub.id tags = { Name = \u0026#34;${var.prod_environment}-public-route-table\u0026#34; Environment = \u0026#34;${var.prod_environment}\u0026#34; } } # Routing tables to route traffic for Private Subnet- Prod Hub resource \u0026#34;aws_route_table\u0026#34; \u0026#34;prod-hub-private\u0026#34; { vpc_id = aws_vpc.prod_hub.id tags = { Name = \u0026#34;${var.prod_environment}-private-route-table\u0026#34; Environment = \u0026#34;${var.prod_environment}\u0026#34; } } # Routing tables to route traffic for Private Subnet- Spoke-01 resource \u0026#34;aws_route_table\u0026#34; \u0026#34;spoke-01-private\u0026#34; { vpc_id = aws_vpc.spoke-01.id tags = { Name = \u0026#34;${var.spoke_01_environmet}-private-route-table\u0026#34; Environment = \u0026#34;${var.spoke_01_environmet}\u0026#34; } } # Routing tables to route traffic for Private Subnet- Spoke-02 resource \u0026#34;aws_route_table\u0026#34; \u0026#34;spoke-02-private\u0026#34; { vpc_id = aws_vpc.spoke-02.id tags = { Name = \u0026#34;${var.spoke_02_environmet}-private-route-table\u0026#34; Environment = \u0026#34;${var.spoke_02_environmet}\u0026#34; } } # Route for Internet Gateway in Prod-Hub resource \u0026#34;aws_route\u0026#34; \u0026#34;public_internet_gateway\u0026#34; { route_table_id = aws_route_table.prod-hub-public.id destination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34; gateway_id = aws_internet_gateway.IGW_ProdHub.id } # Route for NAT Gateway - Prodhub resource \u0026#34;aws_route\u0026#34; \u0026#34;private_prod_nat_gateway\u0026#34; { route_table_id = aws_route_table.prod-hub-private.id destination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34; nat_gateway_id = aws_nat_gateway.Prod_HubNAT.id } resource \u0026#34;aws_route\u0026#34; \u0026#34;private_prod_spoke01_gateway\u0026#34; { route_table_id = aws_route_table.prod-hub-private.id destination_cidr_block = \u0026#34;10.14.0.0/24\u0026#34; transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id } resource \u0026#34;aws_route\u0026#34; \u0026#34;private_prod_spoke02_gateway\u0026#34; { route_table_id = aws_route_table.prod-hub-private.id destination_cidr_block = \u0026#34;10.15.0.0/24\u0026#34; transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id } # Route for NAT Gateway - Spoke-01 resource \u0026#34;aws_route\u0026#34; \u0026#34;private_spoke01_nat_gateway\u0026#34; { route_table_id = aws_route_table.spoke-01-private.id destination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34; transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id } # Route for NAT Gateway - Spoke-02 resource \u0026#34;aws_route\u0026#34; \u0026#34;private_spoke02_nat_gateway\u0026#34; { route_table_id = aws_route_table.spoke-02-private.id destination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34; transit_gateway_id = aws_ec2_transit_gateway.ProdHub_EgressTGW.id } #Route for Egress TGW resource \u0026#34;aws_ec2_transit_gateway_route\u0026#34; \u0026#34;RT_Egress01\u0026#34; { destination_cidr_block = \u0026#34;10.14.0.0/24\u0026#34; transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.RT-Egrees.id transit_gateway_attachment_id = aws_ec2_transit_gateway_vpc_attachment.spoke-01.id } #Route for Egress TGW resource \u0026#34;aws_ec2_transit_gateway_route\u0026#34; \u0026#34;RT_Egress02\u0026#34; { destination_cidr_block = \u0026#34;10.15.0.0/24\u0026#34; transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.RT-Egrees.id transit_gateway_attachment_id = aws_ec2_transit_gateway_vpc_attachment.spoke-02.id } #Route for RT-Private TGW resource \u0026#34;aws_ec2_transit_gateway_route\u0026#34; \u0026#34;RT_Private_Blackhole\u0026#34; { destination_cidr_block = \u0026#34;10.15.0.0/24\u0026#34; transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.RT-Private.id blackhole = true } resource \u0026#34;aws_ec2_transit_gateway_route\u0026#34; \u0026#34;RT_PrivateSPOKE_blackhole\u0026#34; { destination_cidr_block = \u0026#34;10.14.0.0/24\u0026#34; transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.RT-Private.id blackhole = true } resource \u0026#34;aws_ec2_transit_gateway_route\u0026#34; \u0026#34;RT_Private_Allow\u0026#34; { destination_cidr_block = \u0026#34;10.13.0.0/24\u0026#34; transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.RT-Private.id transit_gateway_attachment_id = aws_ec2_transit_gateway_vpc_attachment.prod-hub.id } #Create ec2 instances in Prod,Spoke-01/02 to test the egress architecture resource \u0026#34;aws_instance\u0026#34; \u0026#34;prod-t2\u0026#34; { ami = \u0026#34;ami-04e914639d0cca79a\u0026#34; instance_type = \u0026#34;t2.micro\u0026#34; subnet_id = \u0026#34;${aws_subnet.prod-hub-private[0].id}\u0026#34; associate_public_ip_address = \u0026#34;true\u0026#34; key_name = \u0026#34;terraform-key\u0026#34; } resource \u0026#34;aws_instance\u0026#34; \u0026#34;spoke-01-t2\u0026#34; { ami = \u0026#34;ami-04e914639d0cca79a\u0026#34; instance_type = \u0026#34;t2.micro\u0026#34; subnet_id = \u0026#34;${aws_subnet.spoke-01-private[0].id}\u0026#34; associate_public_ip_address = \u0026#34;false\u0026#34; key_name = \u0026#34;terraform-key\u0026#34; } resource \u0026#34;aws_instance\u0026#34; \u0026#34;spoke-02-t2\u0026#34; { ami = \u0026#34;ami-04e914639d0cca79a\u0026#34; instance_type = \u0026#34;t2.micro\u0026#34; subnet_id = \u0026#34;${aws_subnet.spoke-02-private[0].id}\u0026#34; associate_public_ip_address = \u0026#34;false\u0026#34; key_name = \u0026#34;terraform-key\u0026#34; } ","permalink":"https://akamalsha.github.io/en/blog/terraform-aws/","summary":"\u003cp\u003eIn this post I will be sharing the terraform code to build a Centralized NAT Gateway using Transit Gateway (Route table design)\u003c/p\u003e\n\u003cp\u003eI use Visual Studio Code to build my terraform code.\u003c/p\u003e\n\u003cp\u003eThe directory structure looks like this\n\u003cimg loading=\"lazy\" src=\"/vscode.png\" alt=\"image alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eThis code is also uploaded in my github repo \u003ca href=\"https://github.com/akamalsha/terraform-aws-code\"\u003ehttps://github.com/akamalsha/terraform-aws-code\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFeel free to customize the configuration according to your specific requirements and explore additional features and functionalities offered by Terraform and AWS to further optimize your network infrastructure.\u003c/p\u003e","title":"Terraform AWS Infrastructure"},{"content":"Ensuring that all services are up and operating without any disruptions is crucial in a data centre setting.\nIf you are utilising a DHCP server, it is crucial to ensure that you do not have duplicate IP addresses or IP conflicts, especially in server environments, as this will disrupt your vital services.\nHow can IP conflicts be avoided? Keeping an eye on the distribution of IP addresses Preserving an IPAM system in real time Setting up static IP addresses on important servers that are not covered by DHCP or using DHCP IP reservations. It can take days to find and fix duplicate IP addresses, which makes problem solving difficult at times.\nHow can this be fixed? If another computer already has a lease on the affected server\u0026rsquo;s IP address. In the ipconfig settings, duplicate message will be shown to you. The next step is to go down and locate the machine that holds the IP of the affected virtual machine. This is when things become more complex.\nSeeing the mac and arp tables when you log into your layer 3 switch on this subnet is the simplest method to resolve this.\nAnother way to resolve this is to set conflict detection attempts in the DHCP server itself. Login to the DHCP server \u0026gt; right click on ipv4 \u0026gt; select properties \u0026gt; under advanced \u0026gt; set the number to any digit.\n","permalink":"https://akamalsha.github.io/en/blog/windows/","summary":"\u003cp\u003eEnsuring that all services are up and operating without any disruptions is crucial in a data centre setting.\u003c/p\u003e\n\u003cp\u003eIf you are utilising a DHCP server, it is crucial to ensure that you do not have duplicate IP addresses or IP conflicts, especially in server environments, as this will disrupt your vital services.\u003c/p\u003e\n\u003ch1 id=\"how-can-ip-conflicts-be-avoided\"\u003eHow can IP conflicts be avoided?\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eKeeping an eye on the distribution of IP addresses\u003c/li\u003e\n\u003cli\u003ePreserving an IPAM system in real time\u003c/li\u003e\n\u003cli\u003eSetting up static IP addresses on important servers that are not covered by DHCP or using DHCP IP reservations.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt can take days to find and fix duplicate IP addresses, which makes problem solving difficult at times.\u003c/p\u003e","title":"Windows Server Configuration"},{"content":"What is Zero Day CVE-2024-3400?\nA command injection vulnerability in the GlobalProtect feature of Palo Alto Networks PAN-OS software for specific PAN-OS versions and distinct feature configurations may enable an unauthenticated attacker to execute arbitrary code with root privileges on the firewall. Fixes for PAN-OS 10.2, PAN-OS 11.0, and PAN-OS 11.1 are in development and are expected to be released by April 14, 2024. Cloud NGFW, Panorama appliances, and Prisma Access are not impacted by this vulnerability. All other versions of PAN-OS are also not impacted.\nHow can we mitigate this?\nThe current solution is to use Threat ID 95187 if you have the Threat Prevention subscription. Instructionson how to do this are available at the link provided https://live.paloaltonetworks.com/t5/globalprotect-articles/applying-vulnerability-protection-to-globalprotect-interfaces/ta-p/340184\nHow can you check if these security settings are in place?\nThe vulnerability profile with blocking option of reset-server, resets the TCP connection and blocks the UDP connection.\nNow, if you need to verify if this is working, login to your PAN device which has the Global protect gateway. Go to Monitor \u0026gt; Traffic and in the search filter it with the rule name (( rule eq \u0026lsquo;Name-of-security-policy\u0026rsquo; ) You should now see logs with type : end | application : incomplete | session end reason : aged out which means that the TCP connection was reset.\nTo verify UDP connection go to Monitor \u0026gt; Threat and in the search filter it with the destination zone of the global protect gateway ( zone.src eq \u0026lsquo;Name-of-GP-Zone\u0026rsquo; ) and category of threat ( category-of-threatid eq \u0026lsquo;code-execution\u0026rsquo; ) You should now see logs with action drop. ","permalink":"https://akamalsha.github.io/en/blog/zero-day.cve-2024-3400/","summary":"\u003cp\u003eWhat is Zero Day CVE-2024-3400?\u003c/p\u003e\n\u003cp\u003eA command injection vulnerability in the GlobalProtect feature of Palo Alto Networks PAN-OS software for specific PAN-OS versions and distinct feature configurations may enable an unauthenticated attacker to execute arbitrary code with root privileges on the firewall.\nFixes for PAN-OS 10.2, PAN-OS 11.0, and PAN-OS 11.1 are in development and are expected to be released by April 14, 2024. Cloud NGFW, Panorama appliances, and Prisma Access are not impacted by this vulnerability. All other versions of PAN-OS are also not impacted.\u003c/p\u003e","title":"Zero-Day CVE-2024-3400"},{"content":"","permalink":"https://akamalsha.github.io/en/search/","summary":"","title":""}]